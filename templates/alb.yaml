AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an Application Load Balancer (ALB) in an existing VPC and register an existing instance

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the existing VPC
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of subnet IDs for the ALB
  SecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: The security group IDs for the ALB
  InstanceId:
    Type: AWS::EC2::Instance::Id
    Description: The ID of the existing EC2 instance to be added to the target group
  LambdaFunctionARN:
    Type: String
    Description: The ARN of the Lambda function that registers the instance to the target group
  MyApplicationLoadBalancer:
    Type: String
    Description: Enter myapplicationloadbalancer 
    Default: myapplicationloadbalancer
  MyEnvironment:
    Type: String
    Description: Enter myenvironment
    Default: myenvironment
  Owner:
    Type: String
    Description: Enter owner
    Default: owner
  MyTargetGroups:
    Type: String
    Description: Enter mytargetgroups
    Default: mytargetgroups
  MyEnvironment1:
    Type: String
    Description: Enter myenvironment1
    Default: myenvironment1
  Owner1:
    Type: String
    Description: Enter owner1
    Default: owner1

Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-application-load-balancer
      Subnets: !Ref SubnetIds
      SecurityGroups: !Ref SecurityGroupIds
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Ref MyApplicationLoadBalancer 
        - Key: Environment
          Value: !Ref MyEnvironment
        - Key: Owner
          Value: !Ref Owner

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-target-group
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthCheckPath: /index.html
      Matcher:
        HttpCode: 200
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Ref MyTargetGroups
        - Key: Environment1
          Value: !Ref MyEnvironment1
        - Key: Owner1
          Value: !Ref Owner1

  RegisterInstance:
    Type: Custom::RegisterInstance
    Properties:
      ServiceToken: !Ref LambdaFunctionARN
      TargetGroupArn: !Ref TargetGroup
      InstanceId: !Ref InstanceId

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the ALB
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  TargetGroupARN:
    Description: ARN of the target group
    Value: !Ref TargetGroup